//// -- LEVEL 1
//// -- Tables and References

// Creating tables
Table plant_germplasm as PG {
  PGID int [pk, increment] // auto-increment
  description varchar
}

Table seed_lot as SL {
  SLID int [pk, increment] // auto-increment
  PGID int
}

Table strain_germplasm as SG {
  SGID int [pk, increment] // auto-increment
}

Table syncom as SC {
  SCID int [pk, increment] // auto-increment
}

Table microbial_community as MC {
  MCID int [pk, increment] // auto-increment
}

Table study as ST {
  STID int [pk, increment] // auto-increment
}

Table sample as SA {
  SAID int [pk, increment] // auto-increment
  STID int
  SLID int
  SGID int
  SCID int
  MCID int
  EPID int
}

Table seq_experiment as SE {
  SEID int [pk, increment] // auto-increment
  SAID int
  SRID int
}

Table seq_run as SR {
  SRID int [pk, increment] // auto-increment
  SEID int
}

Table experimental_protocol as EP {
  EPID int [pk, increment] // auto-increment
}


Table genotype as GE {
  GEID int [pk, increment] // auto-increment
  GDID int
  SAID int
  PGID int
  SGID int
  SCID int
  MCID int
}

Table genotype_description as GD {
  GDID int [pk, increment] // auto-increment
}

Table transcriptome as TR {
  TRID int [pk, increment] // auto-increment
  SAID int
  TDID int
  }

Table transcriptome_description as TD {
  TDID int [pk, increment] // auto-increment
  }

Table field_trail as FT {
  FTID int [pk, increment] // auto-increment
  STID int
  }

Table field_plot as FP {
  FPID int [pk, increment] // auto-increment
  FTID int
  SLID int
  }

Table field_climate as FC {
  FCID int [pk, increment] // auto-increment
  FTID int
  }

Table field_management as FM {
  FMID int [pk, increment] // auto-increment
  FTID int
  }

Table phenotype as PH {
  PHID int [pk, increment] // auto-increment
  PDID int
  SAID int
  }

Table phenotype_description as PD {
  PDID int [pk, increment] // auto-increment
  }



// Creating references
// You can also define relaionship separately
// > many-to-one; < one-to-many; - one-to-one
Ref: PG.PGID < SL.PGID 
Ref: SL.SLID < SA.SLID
Ref: ST.STID < SA.STID
Ref: SG.SGID < SA.SGID
Ref: SC.SCID < SA.SCID
Ref: MC.MCID < SA.MCID
Ref: EP.EPID < SA.EPID
Ref: SE.SAID > SA.SAID
Ref: SE.SEID < SR.SEID
Ref: SR.SRID < SE.SRID
Ref: GD.GDID < GE.GDID
Ref: TD.TDID < TR.TDID
Ref: ST.STID < FT.STID
Ref: SL.SLID < FP.SLID
Ref: FT.FTID < FP.FTID
Ref: FT.FTID < FC.FTID
Ref: FT.FTID < FM.FTID
Ref: SA.SAID < PH.SAID
Ref: PD.PDID < PH.PDID
Ref: SA.SAID < GE.SAID
Ref: PG.PGID < GE.PGID
Ref: SG.SGID < GE.SGID
Ref: SC.SCID < GE.SCID
Ref: MC.MCID < GE.MCID
Ref: SA.SAID < TR.SAID





//----------------------------------------------//

//// -- LEVEL 2
//// -- Adding column settings

//Table order_items {
//  order_id int [ref: > orders.id]
//  product_id int    
//  quantity int [default: 1] // default value
//}

//Ref: order_items.product_id > products.id
//
//Table orders {
//  id int [pk] // primary key
//  user_id int [not null, unique]
//  status varchar
//  created_at varchar [note: 'When order created'] // add column note
//}

//----------------------------------------------//

//// -- Level 3 
//// -- Enum, Indexes

// Enum for 'products' table below
//Enum products_status {
//  out_of_stock
//  in_stock
//  running_low [note: 'less than 20'] // add column note
//}

// Indexes: You can define a single or multi-column index 
//Table products {
//  id int [pk]
//  name varchar
//  merchant_id int [not null]
//  price int
//  status products_status
//  created_at datetime [default: `now()`]
//  
//  Indexes {
//    (merchant_id, status) [name:'product_status']
//    id [unique]
//  }
//}

//Ref: products.merchant_id > merchants.id // many-to-one


